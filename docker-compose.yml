version: '3.8'
services:
  nginx:
    build:
      context: ./docker/nginx
      args:
        BASE_DOMAIN: ${BASE_DOMAIN}
        USE_SSL: ${USE_SSL}
        BUILD_SSL: ${BUILD_SSL}
    container_name: nginx
    hostname: nginx
    ports:
      - '443:443'
    volumes:
      - './docker/nginx/logs/error.log:/var/log/nginx/error_manual.log:rw'
      - './docker/nginx/logs/access.log:/var/log/nginx/access_manual.log:rw'
      - './docker/certbot/conf/:/etc/nginx/ssl/:ro'
      - './docker/certbot/www/:/var/www/certbot/:ro'
    restart: always

  nginxtwo:
    build:
      context: ./docker/nginx
      dockerfile: ./Dockerfile2
      args:
        BASE_DOMAIN: ${BASE_DOMAIN}
        USE_SSL: ${USE_SSL}
    container_name: nginxtwo
    hostname: nginxtwo
    ports:
      - '80:80'
    volumes:
      - './docker/nginx/logs/error2.log:/var/log/nginx/error_manual.log:rw'
      - './docker/nginx/logs/access2.log:/var/log/nginx/access_manual.log:rw'
      - './docker/certbot/www/:/var/www/certbot/:ro'
    restart: always

  certbot:
    build:
      context: ./docker/certbot
      args:
        BASE_DOMAIN: ${BASE_DOMAIN}
        USE_SSL: ${USE_SSL}
        BUILD_SSL: ${BUILD_SSL}
    volumes:
      - './docker/certbot/conf/:/etc/letsencrypt/:rw'
      - './docker/certbot/www/:/var/www/certbot/:rw'
    restart: unless-stopped

  auth:
    build:
      context: ./services/auth
      target: production
    container_name: auth
    hostname: auth
    restart: always
    command: 'yarn start'

  stranerd:
    build:
      context: ./services/stranerd
      target: production
    container_name: stranerd
    hostname: stranerd
    restart: always
    command: 'yarn start'

  utils:
    build:
      context: ./services/utils
      target: production
    container_name: utils
    hostname: tasks
    restart: always
    command: 'yarn start'